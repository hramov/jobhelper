// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobhelper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobhelperClient is the client API for Jobhelper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobhelperClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*DeviceReply, error)
}

type jobhelperClient struct {
	cc grpc.ClientConnInterface
}

func NewJobhelperClient(cc grpc.ClientConnInterface) JobhelperClient {
	return &jobhelperClient{cc}
}

func (c *jobhelperClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*DeviceReply, error) {
	out := new(DeviceReply)
	err := c.cc.Invoke(ctx, "/jobhelper.Jobhelper/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobhelperServer is the server API for Jobhelper service.
// All implementations must embed UnimplementedJobhelperServer
// for forward compatibility
type JobhelperServer interface {
	GetAll(context.Context, *GetAllRequest) (*DeviceReply, error)
	mustEmbedUnimplementedJobhelperServer()
}

// UnimplementedJobhelperServer must be embedded to have forward compatible implementations.
type UnimplementedJobhelperServer struct {
}

func (UnimplementedJobhelperServer) GetAll(context.Context, *GetAllRequest) (*DeviceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedJobhelperServer) mustEmbedUnimplementedJobhelperServer() {}

// UnsafeJobhelperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobhelperServer will
// result in compilation errors.
type UnsafeJobhelperServer interface {
	mustEmbedUnimplementedJobhelperServer()
}

func RegisterJobhelperServer(s grpc.ServiceRegistrar, srv JobhelperServer) {
	s.RegisterService(&Jobhelper_ServiceDesc, srv)
}

func _Jobhelper_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobhelperServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobhelper.Jobhelper/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobhelperServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jobhelper_ServiceDesc is the grpc.ServiceDesc for Jobhelper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jobhelper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobhelper.Jobhelper",
	HandlerType: (*JobhelperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _Jobhelper_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jobhelper.proto",
}
